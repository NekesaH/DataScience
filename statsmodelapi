{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"statsmodelapi","provenance":[],"authorship_tag":"ABX9TyMqJaIubb1/+Za5v9ARRqms"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"Gt-9qu_STrFw","colab_type":"code","outputId":"fd7914ef-2c56-46ec-bcf9-7c92c735931f","executionInfo":{"status":"ok","timestamp":1585899828300,"user_tz":0,"elapsed":1800,"user":{"displayName":"Charity Nekesa","photoUrl":"","userId":"01354884186278421638"}},"colab":{"base_uri":"https://localhost:8080/","height":69}},"source":["%matplotlib inline \n","import matplotlib as mpl \n","import seaborn as sns \n","import matplotlib.pyplot as plt \n","import statsmodels.formula.api as smf \n","import statsmodels.graphics.api as smg \n","import pandas as pd \n","import numpy as np \n","import patsy \n","from statsmodels.graphics.correlation import plot_corr \n","from sklearn.model_selection import train_test_split \n","plt.style.use('seaborn') "],"execution_count":1,"outputs":[{"output_type":"stream","text":["ERROR! Session/line number was not unique in database. History logging moved to new session 59\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"GyQK49KHTxdk","colab_type":"code","outputId":"6f0ce728-127c-4c61-cacf-aabcccabdb5c","executionInfo":{"status":"ok","timestamp":1585899832200,"user_tz":0,"elapsed":1300,"user":{"displayName":"Charity Nekesa","photoUrl":"","userId":"01354884186278421638"}},"colab":{"base_uri":"https://localhost:8080/","height":364}},"source":["rawBostonData = pd.read_csv('https://raw.githubusercontent.com/PacktWorkshops/The-Data-Science-Workshop/master/Chapter02/Dataset/Boston.csv')\n","\n","\n","rawBostonData.head() #inspect first five elements in the DataFrame\n","rawBostonData = rawBostonData.dropna() #drop null values\n","rawBostonData = rawBostonData.drop_duplicates() #drop duplicate values\n","list(rawBostonData.columns)\n","renamedBostonData = rawBostonData.rename(columns = {'CRIM':'crimeRatePerCapita', \n"," ' ZN ':'landOver25K_sqft', \n"," 'INDUS ':'non-retailLandProptn', \n"," 'CHAS':'riverDummy', \n"," 'NOX':'nitrixOxide_pp10m', \n"," 'RM':'AvgNo.RoomsPerDwelling', \n"," 'AGE':'ProptnOwnerOccupied', \n"," 'DIS':'weightedDist', \n"," 'RAD':'radialHighwaysAccess', \n"," 'TAX':'propTaxRate_per10K', \n"," 'PTRATIO':'pupilTeacherRatio', \n"," 'LSTAT':'pctLowerStatus', \n"," 'MEDV':'medianValue_Ks'}) \n","renamedBostonData.head()\n","renamedBostonData.info()\n","renamedBostonData.describe(include=[np.number]).T\n","X = renamedBostonData.drop('crimeRatePerCapita', axis = 1)\n","y = renamedBostonData[['crimeRatePerCapita']]\n","seed = 10\n","test_data_size = 0.3\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = test_data_size, random_state = seed)\n","train_data = pd.concat([X_train, y_train], axis = 1)\n","test_data = pd.concat([X_test, y_test], axis = 1)"],"execution_count":2,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 506 entries, 0 to 505\n","Data columns (total 13 columns):\n"," #   Column                  Non-Null Count  Dtype  \n","---  ------                  --------------  -----  \n"," 0   crimeRatePerCapita      506 non-null    float64\n"," 1   landOver25K_sqft        506 non-null    float64\n"," 2   non-retailLandProptn    506 non-null    float64\n"," 3   riverDummy              506 non-null    int64  \n"," 4   nitrixOxide_pp10m       506 non-null    float64\n"," 5   AvgNo.RoomsPerDwelling  506 non-null    float64\n"," 6   ProptnOwnerOccupied     506 non-null    float64\n"," 7   weightedDist            506 non-null    float64\n"," 8   radialHighwaysAccess    506 non-null    int64  \n"," 9   propTaxRate_per10K      506 non-null    int64  \n"," 10  pupilTeacherRatio       506 non-null    float64\n"," 11  pctLowerStatus          506 non-null    float64\n"," 12  medianValue_Ks          506 non-null    float64\n","dtypes: float64(10), int64(3)\n","memory usage: 55.3 KB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"xpvY65WVO14s","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":451},"outputId":"d1091dc4-c9b5-4926-f1dd-695948f9560d","executionInfo":{"status":"ok","timestamp":1585899899300,"user_tz":0,"elapsed":1600,"user":{"displayName":"Charity Nekesa","photoUrl":"","userId":"01354884186278421638"}}},"source":["#use statsmodel API to create a simple regression model\n","\n","import pandas as pd\n","import statsmodels.formula.api as smf\n","from sklearn.model_selection import train_test_split\n","linearModelResult = linearModel.fit()\n","linearModel = smf.ols(formula='crimeRatePerCapita ~ medianValue_Ks', data=train_data)\n","linearModel = smf.ols(formula='crimeRatePerCapita ~ medianValue_Ks', data=train_data)\n","print(linearModelResult.summary())"],"execution_count":4,"outputs":[{"output_type":"stream","text":["                            OLS Regression Results                            \n","==============================================================================\n","Dep. Variable:     crimeRatePerCapita   R-squared:                       0.144\n","Model:                            OLS   Adj. R-squared:                  0.141\n","Method:                 Least Squares   F-statistic:                     59.02\n","Date:                Fri, 03 Apr 2020   Prob (F-statistic):           1.56e-13\n","Time:                        07:46:31   Log-Likelihood:                -1217.4\n","No. Observations:                 354   AIC:                             2439.\n","Df Residuals:                     352   BIC:                             2447.\n","Df Model:                           1                                         \n","Covariance Type:            nonrobust                                         \n","==================================================================================\n","                     coef    std err          t      P>|t|      [0.025      0.975]\n","----------------------------------------------------------------------------------\n","Intercept         11.2094      1.079     10.386      0.000       9.087      13.332\n","medianValue_Ks    -0.3502      0.046     -7.683      0.000      -0.440      -0.261\n","==============================================================================\n","Omnibus:                      447.354   Durbin-Watson:                   1.928\n","Prob(Omnibus):                  0.000   Jarque-Bera (JB):            39791.431\n","Skew:                           5.897   Prob(JB):                         0.00\n","Kurtosis:                      53.583   Cond. No.                         63.7\n","==============================================================================\n","\n","Warnings:\n","[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"],"name":"stdout"}]}]}